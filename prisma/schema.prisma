generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model broker_connections {
  id          String    @id
  userId      String
  broker      String
  credentials String
  isPaper     Boolean   @default(true)
  isActive    Boolean   @default(true)
  lastSync    DateTime?
  createdAt   DateTime  @default(now())
  users       users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, broker])
  @@index([userId])
}

model executions {
  id             String    @id
  positionId     String
  type           String
  quantity       Decimal   @db.Decimal(15, 6)
  price          Decimal   @db.Decimal(15, 6)
  commission     Decimal   @default(0) @db.Decimal(10, 4)
  exchangeFees   Decimal   @default(0) @db.Decimal(10, 4)
  secFees        Decimal   @default(0) @db.Decimal(10, 4)
  tafFees        Decimal   @default(0) @db.Decimal(10, 4)
  clearingFees   Decimal   @default(0) @db.Decimal(10, 4)
  otherFees      Decimal   @default(0) @db.Decimal(10, 4)
  totalFees      Decimal   @default(0) @db.Decimal(10, 4)
  grossValue     Decimal   @db.Decimal(15, 2)
  netValue       Decimal   @db.Decimal(15, 2)
  brokerName     String?
  brokerExecId   String?
  brokerOrderId  String?
  executedAt     DateTime
  settlementDate DateTime?
  createdAt      DateTime  @default(now())
  positions      positions @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@index([executedAt])
  @@index([positionId])
}

model market_data_cache {
  symbol    String
  timeframe String
  open      Decimal  @db.Decimal(15, 6)
  high      Decimal  @db.Decimal(15, 6)
  low       Decimal  @db.Decimal(15, 6)
  close     Decimal  @db.Decimal(15, 6)
  volume    BigInt
  timestamp DateTime

  @@id([symbol, timeframe, timestamp])
  @@index([symbol, timestamp])
  @@index([timeframe, timestamp])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model portfolios {
  id               String          @id
  userId           String
  name             String
  broker           String?
  accountType      String?
  baseCurrency     String          @default("USD")
  startingBalance  Decimal?        @db.Decimal(15, 2)
  currentBalance   Decimal?        @db.Decimal(15, 2)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  account_status   String          @default("active")
  current_drawdown Decimal         @default(0) @db.Decimal(5, 2)
  users            users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  risk_settings    risk_settings[]
  strategies       strategies[]
  trade_plans      trade_plans[]
}

model position_notes {
  id         String    @id
  positionId String
  noteType   String
  content    String
  createdAt  DateTime  @default(now())
  positions  positions @relation(fields: [positionId], references: [id], onDelete: Cascade)
}

model positions {
  id              String           @id
  strategyId      String
  symbol          String
  assetType       String           @default("stock")
  direction       String           @default("long")
  status          String           @default("open")
  currentQuantity Decimal          @default(0) @db.Decimal(15, 6)
  avgEntryPrice   Decimal?         @db.Decimal(15, 6)
  avgExitPrice    Decimal?         @db.Decimal(15, 6)
  stopLoss        Decimal?         @db.Decimal(15, 6)
  takeProfit      Decimal?         @db.Decimal(15, 6)
  trailingStop    Decimal?         @db.Decimal(15, 6)
  realizedPnl     Decimal          @default(0) @db.Decimal(15, 2)
  unrealizedPnl   Decimal          @default(0) @db.Decimal(15, 2)
  totalFees       Decimal          @default(0) @db.Decimal(15, 2)
  netPnl          Decimal          @default(0) @db.Decimal(15, 2)
  maxGainPercent  Decimal?         @db.Decimal(5, 2)
  maxLossPercent  Decimal?         @db.Decimal(5, 2)
  holdingDays     Int?
  rMultiple       Decimal?         @db.Decimal(5, 2)
  openedAt        DateTime         @default(now())
  closedAt        DateTime?
  lastExecutionAt DateTime?
  executions      executions[]
  position_notes  position_notes[]
  strategies      strategies       @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  trade_plans     trade_plans[]

  @@index([status])
  @@index([strategyId])
  @@index([symbol])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model risk_settings {
  id                     String     @id
  userId                 String
  maxRiskPerTrade        Decimal    @default(1.0) @db.Decimal(5, 2)
  maxDailyRisk           Decimal    @default(3.0) @db.Decimal(5, 2)
  maxWeeklyRisk          Decimal    @default(6.0) @db.Decimal(5, 2)
  maxOpenPositions       Int        @default(5)
  maxCorrelatedPositions Int        @default(3)
  positionSizingMethod   String     @default("fixed_risk")
  createdAt              DateTime   @default(now())
  updatedAt              DateTime
  portfolioId            String
  asset_class_limits     Json?
  drawdown_actions       Json?
  portfolios             portfolios @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  users                  users      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model stock_fundamentals {
  symbol          String   @id
  marketCap       BigInt?
  peRatio         Decimal? @db.Decimal(10, 2)
  pegRatio        Decimal? @db.Decimal(10, 2)
  pbRatio         Decimal? @db.Decimal(10, 2)
  psRatio         Decimal? @db.Decimal(10, 2)
  dividendYield   Decimal? @db.Decimal(5, 2)
  eps             Decimal? @db.Decimal(10, 2)
  revenue         BigInt?
  grossMargin     Decimal? @db.Decimal(5, 2)
  operatingMargin Decimal? @db.Decimal(5, 2)
  profitMargin    Decimal? @db.Decimal(5, 2)
  roe             Decimal? @db.Decimal(5, 2)
  roa             Decimal? @db.Decimal(5, 2)
  debtToEquity    Decimal? @db.Decimal(10, 2)
  currentRatio    Decimal? @db.Decimal(5, 2)
  quickRatio      Decimal? @db.Decimal(5, 2)
  lastUpdated     DateTime @default(now())
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model strategies {
  id                  String      @id
  name                String
  description         String?
  status              String      @default("active")
  type                String?
  maxPositions        Int         @default(5)
  maxDrawdown         Decimal?    @default(10.0) @db.Decimal(5, 2)
  entryRules          Json?
  exitRules           Json?
  positionSizingRules Json?
  totalPnl            Decimal     @default(0) @db.Decimal(15, 2)
  avgWin              Decimal?    @db.Decimal(15, 2)
  avgLoss             Decimal?    @db.Decimal(15, 2)
  winRate             Decimal?    @db.Decimal(5, 2)
  profitFactor        Decimal?    @db.Decimal(5, 2)
  sharpeRatio         Decimal?    @db.Decimal(5, 2)
  lastCalculated      DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime
  closedAt            DateTime?
  allocatedCapital    Decimal?    @db.Decimal(15, 2)
  closedPositions     Int         @default(0)
  losingPositions     Int         @default(0)
  maxRiskPercent      Decimal?    @default(2.0) @db.Decimal(5, 2)
  netPnl              Decimal     @default(0) @db.Decimal(15, 2)
  openPositions       Int         @default(0)
  portfolioId         String
  totalFees           Decimal     @default(0) @db.Decimal(15, 2)
  totalPositions      Int         @default(0)
  winningPositions    Int         @default(0)
  parent_strategy_id  String?
  blocked_reason      String?
  positions           positions[]
  portfolios          portfolios  @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([parent_strategy_id])
  @@index([portfolioId])
  @@index([status])
}

model subscription_limits {
  tier                   String  @id
  maxAccounts            Int
  maxPositions           Int
  maxScreenerResults     Int
  screenerRefreshSeconds Int
  hasFundamentals        Boolean
  hasRealtimeData        Boolean
  hasApiAccess           Boolean
  hasBrokerIntegration   Boolean
  monthlyPrice           Decimal @db.Decimal(6, 2)
}

model trade_checklist_items {
  id                        String                      @id
  userId                    String
  question                  String
  isRequired                Boolean                     @default(true)
  orderIndex                Int?
  createdAt                 DateTime                    @default(now())
  users                     users                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  trade_checklist_responses trade_checklist_responses[]
}

model trade_checklist_responses {
  id                    String                @id
  checklistItemId       String
  response              Boolean?
  createdAt             DateTime              @default(now())
  tradePlanId           String
  trade_checklist_items trade_checklist_items @relation(fields: [checklistItemId], references: [id])
  trade_plans           trade_plans           @relation(fields: [tradePlanId], references: [id], onDelete: Cascade)
}

model trade_plan_notes {
  id          String      @id
  tradePlanId String
  noteType    String
  content     String
  imageUrl    String?
  createdAt   DateTime    @default(now())
  trade_plans trade_plans @relation(fields: [tradePlanId], references: [id], onDelete: Cascade)
}

model trade_plans {
  id                        String                      @id
  portfolioId               String
  positionId                String?
  symbol                    String
  direction                 String
  timeframe                 String?
  thesis                    String
  setupType                 String?
  plannedEntry              Decimal                     @db.Decimal(15, 6)
  plannedStop               Decimal                     @db.Decimal(15, 6)
  plannedTarget             Decimal?                    @db.Decimal(15, 6)
  plannedTarget2            Decimal?                    @db.Decimal(15, 6)
  plannedTarget3            Decimal?                    @db.Decimal(15, 6)
  plannedQuantity           Decimal?                    @db.Decimal(15, 6)
  plannedRiskAmount         Decimal?                    @db.Decimal(15, 2)
  plannedRiskPercent        Decimal?                    @db.Decimal(5, 2)
  riskRewardRatio           Decimal?                    @db.Decimal(5, 2)
  setupQuality              Int?
  confidence                Int?
  marketCondition           String?
  status                    String                      @default("idea")
  outcome                   String?
  executionQuality          Int?
  lessons                   String?
  mistakes                  String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime
  executedAt                DateTime?
  reviewedAt                DateTime?
  trade_checklist_responses trade_checklist_responses[]
  trade_plan_notes          trade_plan_notes[]
  portfolios                portfolios                  @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  positions                 positions?                  @relation(fields: [positionId], references: [id])

  @@index([portfolioId])
  @@index([status])
  @@index([symbol])
}

model users {
  id                       String                  @id
  email                    String                  @unique
  name                     String?
  subscriptionTier         String                  @default("free")
  subscriptionStatus       String                  @default("active")
  airwallexCustomerId      String?
  airwallexPaymentMethodId String?
  subscriptionExpiresAt    DateTime?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime
  emailVerified            DateTime?
  passwordHash             String?
  broker_connections       broker_connections[]
  portfolios               portfolios[]
  risk_settings            risk_settings[]
  trade_checklist_items    trade_checklist_items[]
}
