// TrendDojo Trading Platform - Complete Schema Refactor
// Portfolio > Strategy > Position > Execution hierarchy

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String    @id @default(cuid())
  email                         String    @unique
  name                          String?
  subscriptionTier              String    @default("free") // 'free', 'starter', 'basic', 'pro'
  subscriptionStatus            String    @default("active") // 'active', 'cancelled', 'past_due'
  airwallexCustomerId           String?
  airwallexPaymentMethodId      String?
  subscriptionExpiresAt         DateTime?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt

  // Relations
  portfolios                    Portfolio[]
  riskSettings                  RiskSettings[]
  brokerConnections             BrokerConnection[]
  tradeChecklistItems           TradeChecklistItem[]
  
  @@map("users")
}

// Renamed from Account
model Portfolio {
  id              String    @id @default(cuid())
  userId          String
  name            String
  broker          String?   // 'alpaca', 'ibkr', 'manual'
  accountType     String?   // 'live', 'paper', 'tracking'
  baseCurrency    String    @default("USD")
  startingBalance Decimal?  @db.Decimal(15, 2)
  currentBalance  Decimal?  @db.Decimal(15, 2)

  // Circuit breaker tracking
  accountStatus   String    @default("active") // 'active', 'warning', 'recovery', 'locked'
  currentDrawdown Decimal   @default(0) @db.Decimal(5, 2) // Current % drawdown from peak

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  riskSettings    RiskSettings[]
  strategies      Strategy[]
  tradePlans      TradePlan[] // All trade ideas/journal entries

  @@map("portfolios")
}

model Strategy {
  id                String    @id @default(cuid())
  portfolioId       String
  name              String
  description       String?
  status            String    @default("active") // 'active', 'paused', 'blocked', 'closed', 'testing'
  type              String?   // 'momentum', 'mean_reversion', 'breakout', 'swing', 'trend_following'

  // Versioning - link to parent when cloned
  parentStrategyId  String?   // References the strategy this was cloned from
  blockedReason     String?   // Why strategy was blocked (if applicable)

  // Allocation and Risk
  allocatedCapital  Decimal?  @db.Decimal(15, 2)
  maxPositions      Int       @default(5)
  maxRiskPercent    Decimal?  @db.Decimal(5, 2) @default(2.0)
  maxDrawdown       Decimal?  @db.Decimal(5, 2) @default(10.0)

  // Rules Configuration
  entryRules        Json?
  exitRules         Json?
  positionSizingRules Json?
  
  // Performance Tracking (calculated from positions)
  totalPositions    Int       @default(0)
  openPositions     Int       @default(0)
  closedPositions   Int       @default(0)
  winningPositions  Int       @default(0)
  losingPositions   Int       @default(0)
  
  totalPnl          Decimal   @default(0) @db.Decimal(15, 2)
  totalFees         Decimal   @default(0) @db.Decimal(15, 2)
  netPnl            Decimal   @default(0) @db.Decimal(15, 2)
  
  winRate           Decimal?  @db.Decimal(5, 2)
  avgWin            Decimal?  @db.Decimal(15, 2)
  avgLoss           Decimal?  @db.Decimal(15, 2)
  profitFactor      Decimal?  @db.Decimal(5, 2)
  sharpeRatio       Decimal?  @db.Decimal(5, 2)
  
  lastCalculated    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  closedAt          DateTime?
  
  // Relations
  portfolio         Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  parentStrategy    Strategy? @relation("StrategyVersions", fields: [parentStrategyId], references: [id])
  childStrategies   Strategy[] @relation("StrategyVersions")
  positions         Position[]

  @@index([portfolioId])
  @@index([status])
  @@index([parentStrategyId])
  @@map("strategies")
}

// NEW: Represents an aggregate holding in a symbol
model Position {
  id                String    @id @default(cuid())
  strategyId        String
  symbol            String
  assetType         String    @default("stock") // 'stock', 'crypto', 'forex', 'option', 'future'
  direction         String    @default("long")  // 'long', 'short'
  status            String    @default("open")  // 'open', 'closed', 'partial'
  
  // Current state (calculated from executions)
  currentQuantity   Decimal   @default(0) @db.Decimal(15, 6)
  avgEntryPrice     Decimal?  @db.Decimal(15, 6)
  avgExitPrice      Decimal?  @db.Decimal(15, 6)
  
  // Risk Management
  stopLoss          Decimal?  @db.Decimal(15, 6)
  takeProfit        Decimal?  @db.Decimal(15, 6)
  trailingStop      Decimal?  @db.Decimal(15, 6)
  
  // P&L Tracking
  realizedPnl       Decimal   @default(0) @db.Decimal(15, 2)
  unrealizedPnl     Decimal   @default(0) @db.Decimal(15, 2)
  totalFees         Decimal   @default(0) @db.Decimal(15, 2)
  netPnl            Decimal   @default(0) @db.Decimal(15, 2)
  
  // Metrics
  maxGainPercent    Decimal?  @db.Decimal(5, 2)
  maxLossPercent    Decimal?  @db.Decimal(5, 2)
  holdingDays       Int?
  rMultiple         Decimal?  @db.Decimal(5, 2)
  
  // Timestamps
  openedAt          DateTime  @default(now())
  closedAt          DateTime?
  lastExecutionAt   DateTime?
  
  // Relations
  strategy          Strategy  @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  executions        Execution[]
  tradePlans        TradePlan[] // Can have multiple plans over time
  notes             PositionNote[]
  
  @@index([strategyId])
  @@index([symbol])
  @@index([status])
  @@map("positions")
}

// NEW: Individual fills/transactions
model Execution {
  id                String    @id @default(cuid())
  positionId        String
  
  type              String    // 'buy', 'sell', 'dividend', 'interest', 'fee_only'
  quantity          Decimal   @db.Decimal(15, 6)
  price             Decimal   @db.Decimal(15, 6)
  
  // Fees breakdown (all part of execution)
  commission        Decimal   @default(0) @db.Decimal(10, 4)
  exchangeFees      Decimal   @default(0) @db.Decimal(10, 4)
  secFees           Decimal   @default(0) @db.Decimal(10, 4)  // SEC fees
  tafFees           Decimal   @default(0) @db.Decimal(10, 4)  // FINRA TAF
  clearingFees      Decimal   @default(0) @db.Decimal(10, 4)
  otherFees         Decimal   @default(0) @db.Decimal(10, 4)
  totalFees         Decimal   @default(0) @db.Decimal(10, 4)  // Sum of all fees
  
  // Net amounts
  grossValue        Decimal   @db.Decimal(15, 2) // quantity * price
  netValue          Decimal   @db.Decimal(15, 2) // gross +/- fees (depending on buy/sell)
  
  // Broker integration
  brokerName        String?   // Which broker executed
  brokerExecId      String?   // Broker's execution ID
  brokerOrderId     String?   // Broker's order ID
  
  // Timestamps
  executedAt        DateTime
  settlementDate    DateTime?
  createdAt         DateTime  @default(now())
  
  // Relations
  position          Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  
  @@index([positionId])
  @@index([executedAt])
  @@map("executions")
}

// Renamed from Trade - Now represents planning/journaling
model TradePlan {
  id                String    @id @default(cuid())
  portfolioId       String
  positionId        String?   // Links to actual position when executed
  
  // Planning
  symbol            String
  direction         String    // 'long', 'short'
  timeframe         String?   // '5min', '1h', '4h', '1d', '1w'
  
  // The Thesis
  thesis            String    @db.Text
  setupType         String?   // 'breakout', 'pullback', 'reversal', etc.
  
  // Planned levels
  plannedEntry      Decimal   @db.Decimal(15, 6)
  plannedStop       Decimal   @db.Decimal(15, 6)
  plannedTarget     Decimal?  @db.Decimal(15, 6)
  plannedTarget2    Decimal?  @db.Decimal(15, 6)
  plannedTarget3    Decimal?  @db.Decimal(15, 6)
  
  // Planned risk
  plannedQuantity   Decimal?  @db.Decimal(15, 6)
  plannedRiskAmount Decimal?  @db.Decimal(15, 2)
  plannedRiskPercent Decimal? @db.Decimal(5, 2)
  riskRewardRatio   Decimal?  @db.Decimal(5, 2)
  
  // Analysis
  setupQuality      Int?      // 1-5 score
  confidence        Int?      // 1-10 score
  marketCondition   String?   // 'trending', 'ranging', 'volatile'
  
  // Outcome tracking
  status            String    @default("idea") // 'idea', 'pending', 'executed', 'cancelled', 'expired'
  outcome           String?   // 'win', 'loss', 'breakeven', 'partial'
  
  // Review
  executionQuality  Int?      // 1-5 - How well did I execute?
  lessons           String?   @db.Text
  mistakes          String?   @db.Text
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  executedAt        DateTime? // When actually entered
  reviewedAt        DateTime? // When reviewed
  
  // Relations
  portfolio         Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  position          Position? @relation(fields: [positionId], references: [id], onDelete: SetNull)
  notes             TradePlanNote[]
  checklistResponses TradeChecklistResponse[]
  
  @@index([portfolioId])
  @@index([symbol])
  @@index([status])
  @@map("trade_plans")
}

// Notes for trade plans (journal entries)
model TradePlanNote {
  id          String    @id @default(cuid())
  tradePlanId String
  noteType    String    // 'analysis', 'entry', 'management', 'exit', 'review'
  content     String    @db.Text
  imageUrl    String?   // For chart screenshots
  createdAt   DateTime  @default(now())

  // Relations
  tradePlan   TradePlan @relation(fields: [tradePlanId], references: [id], onDelete: Cascade)
  
  @@map("trade_plan_notes")
}

// Notes for actual positions
model PositionNote {
  id          String    @id @default(cuid())
  positionId  String
  noteType    String    // 'management', 'observation', 'adjustment'
  content     String    @db.Text
  createdAt   DateTime  @default(now())

  // Relations
  position    Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  
  @@map("position_notes")
}

// Keep existing supporting models with updated relations

model RiskSettings {
  id                       String    @id @default(cuid())
  userId                   String
  portfolioId              String
  maxRiskPerTrade          Decimal   @default(1.0) @db.Decimal(5, 2)
  maxDailyRisk             Decimal   @default(3.0) @db.Decimal(5, 2)
  maxWeeklyRisk            Decimal   @default(6.0) @db.Decimal(5, 2)
  maxOpenPositions         Int       @default(5)
  maxCorrelatedPositions   Int       @default(3)
  positionSizingMethod     String    @default("fixed_risk")

  // Flexible risk management via JSON
  assetClassLimits         Json?     // Different drawdown limits per asset class
  drawdownActions          Json?     // What happens at -5%, -10%, -15% etc

  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relations
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio                Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("risk_settings")
}

model BrokerConnection {
  id          String    @id @default(cuid())
  userId      String
  broker      String
  credentials String    // Encrypted JSON
  isPaper     Boolean   @default(true)
  isActive    Boolean   @default(true)
  lastSync    DateTime?
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("broker_connections")
}

model TradeChecklistItem {
  id         String   @id @default(cuid())
  userId     String
  question   String
  isRequired Boolean  @default(true)
  orderIndex Int?
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses  TradeChecklistResponse[]
  
  @@map("trade_checklist_items")
}

model TradeChecklistResponse {
  id               String    @id @default(cuid())
  tradePlanId      String
  checklistItemId  String
  response         Boolean?
  createdAt        DateTime  @default(now())

  // Relations
  tradePlan        TradePlan @relation(fields: [tradePlanId], references: [id], onDelete: Cascade)
  checklistItem    TradeChecklistItem @relation(fields: [checklistItemId], references: [id])
  
  @@map("trade_checklist_responses")
}

model SubscriptionLimit {
  tier                     String   @id
  maxAccounts              Int
  maxPositions             Int
  maxScreenerResults       Int
  screenerRefreshSeconds   Int
  hasFundamentals          Boolean
  hasRealtimeData          Boolean
  hasApiAccess             Boolean
  hasBrokerIntegration     Boolean
  monthlyPrice             Decimal  @db.Decimal(6, 2)
  
  @@map("subscription_limits")
}

// Keep market data tables unchanged
model MarketDataCache {
  symbol    String
  timeframe String
  open      Decimal  @db.Decimal(15, 6)
  high      Decimal  @db.Decimal(15, 6)
  low       Decimal  @db.Decimal(15, 6)
  close     Decimal  @db.Decimal(15, 6)
  volume    BigInt
  timestamp DateTime

  @@id([symbol, timeframe, timestamp])
  @@index([symbol, timestamp])
  @@index([timeframe, timestamp])
  @@map("market_data_cache")
}

model StockTechnicals {
  symbol           String   @id
  price            Decimal? @db.Decimal(15, 6)
  sma_20           Decimal? @db.Decimal(15, 6)
  sma_50           Decimal? @db.Decimal(15, 6)
  sma_200          Decimal? @db.Decimal(15, 6)
  ema_12           Decimal? @db.Decimal(15, 6)
  ema_26           Decimal? @db.Decimal(15, 6)
  rsi              Decimal? @db.Decimal(5, 2)
  macd             Decimal? @db.Decimal(15, 6)
  macd_signal      Decimal? @db.Decimal(15, 6)
  macd_histogram   Decimal? @db.Decimal(15, 6)
  atr_20           Decimal? @db.Decimal(15, 6)
  bb_upper         Decimal? @db.Decimal(15, 6)
  bb_middle        Decimal? @db.Decimal(15, 6)
  bb_lower         Decimal? @db.Decimal(15, 6)
  updated_at       DateTime @default(now())

  @@map("stock_technicals")
}

model StockFundamentals {
  symbol           String   @id
  marketCap        BigInt?
  peRatio          Decimal? @db.Decimal(10, 2)
  pegRatio         Decimal? @db.Decimal(10, 2)
  pbRatio          Decimal? @db.Decimal(10, 2)
  psRatio          Decimal? @db.Decimal(10, 2)
  dividendYield    Decimal? @db.Decimal(5, 2)
  eps              Decimal? @db.Decimal(10, 2)
  revenue          BigInt?
  grossMargin      Decimal? @db.Decimal(5, 2)
  operatingMargin  Decimal? @db.Decimal(5, 2)
  profitMargin     Decimal? @db.Decimal(5, 2)
  roe              Decimal? @db.Decimal(5, 2)
  roa              Decimal? @db.Decimal(5, 2)
  debtToEquity     Decimal? @db.Decimal(10, 2)
  currentRatio     Decimal? @db.Decimal(5, 2)
  quickRatio       Decimal? @db.Decimal(5, 2)
  lastUpdated      DateTime @default(now())

  @@map("stock_fundamentals")
}