// TrendDojo - Safe Migration Schema
// Keeps existing tables while adding new structure

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String    @id @default(cuid())
  email                         String    @unique
  name                          String?
  subscriptionTier              String    @default("free")
  subscriptionStatus            String    @default("active")
  airwallexCustomerId           String?
  airwallexPaymentMethodId      String?
  subscriptionExpiresAt         DateTime?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt

  // Relations - KEEP OLD
  accounts                      Account[]
  
  // Relations - ADD NEW
  portfolios                    Portfolio[]
  
  riskSettings                  RiskSettings[]
  brokerConnections             BrokerConnection[]
  tradeChecklistItems           TradeChecklistItem[]
  
  @@map("users")
}

// KEEP EXISTING Account table
model Account {
  id              String    @id @default(cuid())
  userId          String
  name            String
  broker          String?
  accountType     String?
  baseCurrency    String    @default("USD")
  startingBalance Decimal?  @db.Decimal(15, 2)
  currentBalance  Decimal?  @db.Decimal(15, 2)
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  riskSettings    RiskSettings[]
  trades          Trade[]
  strategies      Strategy[]
  
  @@map("accounts")
}

// ADD NEW Portfolio (duplicate of Account for now)
model Portfolio {
  id              String    @id @default(cuid())
  userId          String
  name            String
  broker          String?
  accountType     String?
  baseCurrency    String    @default("USD")
  startingBalance Decimal?  @db.Decimal(15, 2)
  currentBalance  Decimal?  @db.Decimal(15, 2)
  accountId       String?   // Link to original account for migration
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategies      Strategy[]
  tradePlans      TradePlan[]
  
  @@map("portfolios")
}

// KEEP Strategy as-is (already added)
model Strategy {
  id                String    @id @default(cuid())
  accountId         String?   // OLD - keep for now
  portfolioId       String?   // NEW
  name              String
  description       String?
  status            String    @default("active")
  type              String?
  
  // Allocation and Risk
  allocatedCapital  Decimal?  @db.Decimal(15, 2)
  maxPositions      Int       @default(5)
  maxRiskPercent    Decimal?  @db.Decimal(5, 2) @default(2.0)
  maxDrawdown       Decimal?  @db.Decimal(5, 2) @default(10.0)
  
  // Rules Configuration
  entryRules        Json?
  exitRules         Json?
  positionSizingRules Json?
  
  // Performance Tracking
  totalPositions    Int       @default(0)
  openPositions     Int       @default(0)
  closedPositions   Int       @default(0)
  winningPositions  Int       @default(0)
  losingPositions   Int       @default(0)
  
  totalPnl          Decimal   @default(0) @db.Decimal(15, 2)
  totalFees         Decimal   @default(0) @db.Decimal(15, 2)
  netPnl            Decimal   @default(0) @db.Decimal(15, 2)
  
  winRate           Decimal?  @db.Decimal(5, 2)
  avgWin            Decimal?  @db.Decimal(15, 2)
  avgLoss           Decimal?  @db.Decimal(15, 2)
  profitFactor      Decimal?  @db.Decimal(5, 2)
  sharpeRatio       Decimal?  @db.Decimal(5, 2)
  
  lastCalculated    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  closedAt          DateTime?
  
  // Relations - BOTH
  account           Account?  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  portfolio         Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  trades            Trade[]
  positions         Position[]
  
  @@index([accountId])
  @@index([portfolioId])
  @@index([status])
  @@map("strategies")
}

// KEEP EXISTING Trade table
model Trade {
  id                          String    @id @default(cuid())
  accountId                   String
  strategyId                  String?
  symbol                      String
  assetType                   String?
  direction                   String?
  
  // Keep all existing fields...
  positionGroupId             String?
  parentTradeId               String?
  timeframe                   String?
  positionLabel               String?
  
  plannedEntry                Decimal?  @db.Decimal(15, 6)
  actualEntry                 Decimal?  @db.Decimal(15, 6)
  entryDate                   DateTime?
  quantity                    Decimal?  @db.Decimal(15, 6)
  positionSizeUsd             Decimal?  @db.Decimal(15, 2)
  
  stopLoss                    Decimal   @db.Decimal(15, 6)
  initialStop                 Decimal?  @db.Decimal(15, 6)
  targetPrice                 Decimal?  @db.Decimal(15, 6)
  targetPrice2                Decimal?  @db.Decimal(15, 6)
  riskAmount                  Decimal?  @db.Decimal(15, 2)
  riskPercent                 Decimal?  @db.Decimal(5, 2)
  riskRewardRatio             Decimal?  @db.Decimal(5, 2)
  
  maintainRiskOnStopAdjust    Boolean   @default(true)
  originalQuantity            Decimal?  @db.Decimal(15, 6)
  stopAdjustmentHistory       Json?
  
  broker                      String?
  brokerOrderId               String?
  brokerSyncStatus            String?
  brokerFillPrice             Decimal?  @db.Decimal(15, 6)
  brokerCommission            Decimal?  @db.Decimal(10, 2)
  
  exitPrice                   Decimal?  @db.Decimal(15, 6)
  exitDate                    DateTime?
  exitReason                  String?
  
  pnlAmount                   Decimal?  @db.Decimal(15, 2)
  pnlPercent                  Decimal?  @db.Decimal(10, 2)
  rMultiple                   Decimal?  @db.Decimal(5, 2)
  
  status                      String?
  strategyType                String?
  setupQuality                Int?
  marketCondition             String?
  
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  // Relations
  account                     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  strategy                    Strategy? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
  parentTrade                 Trade?    @relation("TradeParent", fields: [parentTradeId], references: [id])
  childTrades                 Trade[]   @relation("TradeParent")
  tradeNotes                  TradeNote[]
  tradeChecklistResponses     TradeChecklistResponse[]
  
  @@index([strategyId])
  @@map("trades")
}

// ADD NEW Position table
model Position {
  id                String    @id @default(cuid())
  strategyId        String
  tradeId           String?   // Link to original trade for migration
  symbol            String
  assetType         String    @default("stock")
  direction         String    @default("long")
  status            String    @default("open")
  
  currentQuantity   Decimal   @default(0) @db.Decimal(15, 6)
  avgEntryPrice     Decimal?  @db.Decimal(15, 6)
  avgExitPrice      Decimal?  @db.Decimal(15, 6)
  
  stopLoss          Decimal?  @db.Decimal(15, 6)
  takeProfit        Decimal?  @db.Decimal(15, 6)
  trailingStop      Decimal?  @db.Decimal(15, 6)
  
  realizedPnl       Decimal   @default(0) @db.Decimal(15, 2)
  unrealizedPnl     Decimal   @default(0) @db.Decimal(15, 2)
  totalFees         Decimal   @default(0) @db.Decimal(15, 2)
  netPnl            Decimal   @default(0) @db.Decimal(15, 2)
  
  maxGainPercent    Decimal?  @db.Decimal(5, 2)
  maxLossPercent    Decimal?  @db.Decimal(5, 2)
  holdingDays       Int?
  rMultiple         Decimal?  @db.Decimal(5, 2)
  
  openedAt          DateTime  @default(now())
  closedAt          DateTime?
  lastExecutionAt   DateTime?
  
  // Relations
  strategy          Strategy  @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  executions        Execution[]
  tradePlans        TradePlan[]
  notes             PositionNote[]
  
  @@index([strategyId])
  @@index([symbol])
  @@index([status])
  @@map("positions")
}

// ADD NEW Execution table
model Execution {
  id                String    @id @default(cuid())
  positionId        String
  
  type              String
  quantity          Decimal   @db.Decimal(15, 6)
  price             Decimal   @db.Decimal(15, 6)
  
  commission        Decimal   @default(0) @db.Decimal(10, 4)
  exchangeFees      Decimal   @default(0) @db.Decimal(10, 4)
  secFees           Decimal   @default(0) @db.Decimal(10, 4)
  tafFees           Decimal   @default(0) @db.Decimal(10, 4)
  clearingFees      Decimal   @default(0) @db.Decimal(10, 4)
  otherFees         Decimal   @default(0) @db.Decimal(10, 4)
  totalFees         Decimal   @default(0) @db.Decimal(10, 4)
  
  grossValue        Decimal   @db.Decimal(15, 2)
  netValue          Decimal   @db.Decimal(15, 2)
  
  brokerName        String?
  brokerExecId      String?
  brokerOrderId     String?
  
  executedAt        DateTime
  settlementDate    DateTime?
  createdAt         DateTime  @default(now())
  
  // Relations
  position          Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  
  @@index([positionId])
  @@index([executedAt])
  @@map("executions")
}

// ADD NEW TradePlan table
model TradePlan {
  id                String    @id @default(cuid())
  portfolioId       String
  positionId        String?
  tradeId           String?   // Link to original trade
  
  symbol            String
  direction         String
  timeframe         String?
  
  thesis            String?   @db.Text
  setupType         String?
  
  plannedEntry      Decimal?  @db.Decimal(15, 6)
  plannedStop       Decimal?  @db.Decimal(15, 6)
  plannedTarget     Decimal?  @db.Decimal(15, 6)
  plannedTarget2    Decimal?  @db.Decimal(15, 6)
  plannedTarget3    Decimal?  @db.Decimal(15, 6)
  
  plannedQuantity   Decimal?  @db.Decimal(15, 6)
  plannedRiskAmount Decimal?  @db.Decimal(15, 2)
  plannedRiskPercent Decimal? @db.Decimal(5, 2)
  riskRewardRatio   Decimal?  @db.Decimal(5, 2)
  
  setupQuality      Int?
  confidence        Int?
  marketCondition   String?
  
  status            String    @default("idea")
  outcome           String?
  
  executionQuality  Int?
  lessons           String?   @db.Text
  mistakes          String?   @db.Text
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  executedAt        DateTime?
  reviewedAt        DateTime?
  
  // Relations
  portfolio         Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  position          Position? @relation(fields: [positionId], references: [id], onDelete: SetNull)
  notes             TradePlanNote[]
  
  @@index([portfolioId])
  @@index([symbol])
  @@index([status])
  @@map("trade_plans")
}

// Keep all other models unchanged...

model TradeNote {
  id        String   @id @default(cuid())
  tradeId   String
  noteType  String
  content   String
  createdAt DateTime @default(now())

  // Relations
  trade     Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@map("trade_notes")
}

model TradePlanNote {
  id          String    @id @default(cuid())
  tradePlanId String
  noteType    String
  content     String    @db.Text
  imageUrl    String?
  createdAt   DateTime  @default(now())

  tradePlan   TradePlan @relation(fields: [tradePlanId], references: [id], onDelete: Cascade)
  
  @@map("trade_plan_notes")
}

model PositionNote {
  id          String    @id @default(cuid())
  positionId  String
  noteType    String
  content     String    @db.Text
  createdAt   DateTime  @default(now())

  position    Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  
  @@map("position_notes")
}

model RiskSettings {
  id                       String    @id @default(cuid())
  userId                   String
  accountId                String
  maxRiskPerTrade          Decimal   @default(1.0) @db.Decimal(5, 2)
  maxDailyRisk             Decimal   @default(3.0) @db.Decimal(5, 2)
  maxWeeklyRisk            Decimal   @default(6.0) @db.Decimal(5, 2)
  maxOpenPositions         Int       @default(5)
  maxCorrelatedPositions   Int       @default(3)
  positionSizingMethod     String    @default("fixed_risk")
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relations
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account                  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("risk_settings")
}

model TradeChecklistResponse {
  id               String   @id @default(cuid())
  tradeId          String
  checklistItemId  String
  response         Boolean?
  createdAt        DateTime @default(now())

  // Relations
  trade            Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  checklistItem    TradeChecklistItem @relation(fields: [checklistItemId], references: [id])
  
  @@map("trade_checklist_responses")
}

// Keep all other models as-is...
model BrokerConnection {
  id          String    @id @default(cuid())
  userId      String
  broker      String
  credentials String
  isPaper     Boolean   @default(true)
  isActive    Boolean   @default(true)
  lastSync    DateTime?
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("broker_connections")
}

model TradeChecklistItem {
  id         String   @id @default(cuid())
  userId     String
  question   String
  isRequired Boolean  @default(true)
  orderIndex Int?
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses  TradeChecklistResponse[]
  
  @@map("trade_checklist_items")
}

model SubscriptionLimit {
  tier                     String   @id
  maxAccounts              Int
  maxPositions             Int
  maxScreenerResults       Int
  screenerRefreshSeconds   Int
  hasFundamentals          Boolean
  hasRealtimeData          Boolean
  hasApiAccess             Boolean
  hasBrokerIntegration     Boolean
  monthlyPrice             Decimal  @db.Decimal(6, 2)
  
  @@map("subscription_limits")
}

model MarketDataCache {
  symbol    String
  timeframe String
  open      Decimal  @db.Decimal(15, 6)
  high      Decimal  @db.Decimal(15, 6)
  low       Decimal  @db.Decimal(15, 6)
  close     Decimal  @db.Decimal(15, 6)
  volume    BigInt
  timestamp DateTime

  @@id([symbol, timeframe, timestamp])
  @@index([symbol, timestamp])
  @@index([timeframe, timestamp])
  @@map("market_data_cache")
}

model StockFundamentals {
  symbol           String   @id
  marketCap        BigInt?
  peRatio          Decimal? @db.Decimal(10, 2)
  pegRatio         Decimal? @db.Decimal(10, 2)
  pbRatio          Decimal? @db.Decimal(10, 2)
  psRatio          Decimal? @db.Decimal(10, 2)
  dividendYield    Decimal? @db.Decimal(5, 2)
  eps              Decimal? @db.Decimal(10, 2)
  revenue          BigInt?
  grossMargin      Decimal? @db.Decimal(5, 2)
  operatingMargin  Decimal? @db.Decimal(5, 2)
  profitMargin     Decimal? @db.Decimal(5, 2)
  roe              Decimal? @db.Decimal(5, 2)
  roa              Decimal? @db.Decimal(5, 2)
  debtToEquity     Decimal? @db.Decimal(10, 2)
  currentRatio     Decimal? @db.Decimal(5, 2)
  quickRatio       Decimal? @db.Decimal(5, 2)
  lastUpdated      DateTime @default(now())

  @@map("stock_fundamentals")
}